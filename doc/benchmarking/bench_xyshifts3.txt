COMPARISONS OF DIFFERENT LOOK-FNS

On home MBA:

user=> (bench-foodwalks [0.1] [10] [(partial mf/perc-foodspots-exactly
env perc-radius) (partial mf/perc-foodspots-plus env perc-radius)
(partial mf/perc-foodspot-coords-linear env perc-radius) (partial
f/perc-foodspot-coords-in-coll grid-coords perc-radius)])
seed: 1646163979659 , perc-radius: 1 , powerlaw-exponent: 2 , powerlaw-scale: 1
food-distance: 100 , env-size: 1000 , maxpathlen: 2000 , trunclen: 1000

---------------------------
intra-seg-epsilon = 0.1 discretization: 10
 #object[clojure.core$partial$fn__5859 0x6db36b97 clojure.core$partial$fn__5859@6db36b97]
Evaluation count : 120 in 60 samples of 2 calls.
             Execution time mean : 639.525905 ms
    Execution time std-deviation : 53.884013 ms
   Execution time lower quantile : 578.890802 ms ( 2.5%)
   Execution time upper quantile : 779.079541 ms (97.5%)
                   Overhead used : 15.713891 ns

Found 8 outliers in 60 samples (13.3333 %)
	low-severe	 1 (1.6667 %)
	low-mild	 7 (11.6667 %)
 Variance from outliers : 61.8619 % Variance is severely inflated by outliers

---------------------------
intra-seg-epsilon = 0.1 discretization: 10
 #object[clojure.core$partial$fn__5859 0x2d8933d9 clojure.core$partial$fn__5859@2d8933d9]
Evaluation count : 240 in 60 samples of 4 calls.
             Execution time mean : 279.279697 ms
    Execution time std-deviation : 4.661674 ms
   Execution time lower quantile : 271.402832 ms ( 2.5%)
   Execution time upper quantile : 289.190368 ms (97.5%)
                   Overhead used : 15.713891 ns

---------------------------
intra-seg-epsilon = 0.1 discretization: 10
 #object[clojure.core$partial$fn__5859 0x56b1cb31 clojure.core$partial$fn__5859@56b1cb31]

Aborted this after an hour or two.
So DON'T USE mf/perc-foodspot-coords-linear, even with a rectangular
grid, at least when it's got 100 foodspots.

==========================================

The following shows that the linear search through coordinates [first
function] is doable, but still more than 20X slower than the Exactly
MASON search.  Again, the non-exact search is signicantly faster than
Exact, but I'm not sure I should use it.
(maybe it's faster because it finds a foodspot inappropriately and
stops.)



user=> (bench-foodwalks [0.1] [10] [(partial f/perc-foodspot-coords-in-coll grid-coords perc-radius)
(partial mf/perc-foodspots-exactly env perc-radius) (partial mf/perc-foodspots-plus env perc-radius)])
seed: 1645344237512 , perc-radius: 1 , powerlaw-exponent: 2 , powerlaw-scale: 1
food-distance: 100 , env-size: 1000 , maxpathlen: 2000 , trunclen: 1000

---------------------------
intra-seg-epsilon = 0.1 discretization: 10
 #object[clojure.core$partial$fn__5859 0x6ab8757a clojure.core$partial$fn__5859@6ab8757a]
Evaluation count : 60 in 60 samples of 1 calls.
             Execution time mean : 10.272451 sec
    Execution time std-deviation : 322.222761 ms
   Execution time lower quantile : 9.839411 sec ( 2.5%)
   Execution time upper quantile : 11.028014 sec (97.5%)
                   Overhead used : 16.300895 ns

Found 2 outliers in 60 samples (3.3333 %)
	low-severe	 2 (3.3333 %)
 Variance from outliers : 18.9413 % Variance is moderately inflated by outliers

---------------------------
intra-seg-epsilon = 0.1 discretization: 10
 #object[clojure.core$partial$fn__5859 0x66f0c932 clojure.core$partial$fn__5859@66f0c932]
Evaluation count : 180 in 60 samples of 3 calls.
             Execution time mean : 483.483770 ms
    Execution time std-deviation : 11.619151 ms
   Execution time lower quantile : 472.315754 ms ( 2.5%)
   Execution time upper quantile : 512.103393 ms (97.5%)
                   Overhead used : 16.300895 ns

Found 6 outliers in 60 samples (10.0000 %)
	low-severe	 2 (3.3333 %)
	low-mild	 4 (6.6667 %)
 Variance from outliers : 11.0529 % Variance is moderately inflated by outliers

---------------------------
intra-seg-epsilon = 0.1 discretization: 10
 #object[clojure.core$partial$fn__5859 0x5ef74714 clojure.core$partial$fn__5859@5ef74714]
Evaluation count : 300 in 60 samples of 5 calls.
             Execution time mean : 221.170355 ms
    Execution time std-deviation : 10.393349 ms
   Execution time lower quantile : 213.333853 ms ( 2.5%)
   Execution time upper quantile : 244.350361 ms (97.5%)
                   Overhead used : 16.300895 ns

Found 4 outliers in 60 samples (6.6667 %)
	low-severe	 1 (1.6667 %)
	low-mild	 3 (5.0000 %)
 Variance from outliers : 33.5554 % Variance is moderately inflated by outliers
Are the same foodspots found? false

=================
user=> (def wwfs (time (bench-foodwalks [0.1] [10] [(partial
f/perc-foodspot-coords-in-coll grid-coords perc-radius) (partial
mf/perc-foodspots-exactly env perc-radius) (partial mf/perc-foodspots-plus
env perc-radius)])))
seed: 1646260318304 , perc-radius: 1 , powerlaw-exponent: 2 , powerlaw-scale: 1
food-distance: 100 , env-size: 1000 , maxpathlen: 2000 , trunclen: 1000

---------------------------
intra-seg-epsilon = 0.1 discretization: 10
 #object[clojure.core$partial$fn__5859 0x30fbc1cf clojure.core$partial$fn__5859@30fbc1cf]
Evaluation count : 60 in 60 samples of 1 calls.
             Execution time mean : 8.157673 sec
    Execution time std-deviation : 285.927626 ms
   Execution time lower quantile : 7.855880 sec ( 2.5%)
   Execution time upper quantile : 8.784352 sec (97.5%)
                   Overhead used : 16.005152 ns

Found 5 outliers in 60 samples (8.3333 %)
	low-severe	 4 (6.6667 %)
	low-mild	 1 (1.6667 %)
 Variance from outliers : 22.1792 % Variance is moderately inflated by outliers

---------------------------
intra-seg-epsilon = 0.1 discretization: 10
 #object[clojure.core$partial$fn__5859 0x3cc34d7c clojure.core$partial$fn__5859@3cc34d7c]
Evaluation count : 180 in 60 samples of 3 calls.
             Execution time mean : 390.869440 ms
    Execution time std-deviation : 4.742950 ms
   Execution time lower quantile : 384.811021 ms ( 2.5%)
   Execution time upper quantile : 401.305074 ms (97.5%)
                   Overhead used : 16.005152 ns

Found 1 outliers in 60 samples (1.6667 %)
	low-severe	 1 (1.6667 %)
 Variance from outliers : 1.6389 % Variance is slightly inflated by outliers

---------------------------
intra-seg-epsilon = 0.1 discretization: 10
 #object[clojure.core$partial$fn__5859 0x2b30645 clojure.core$partial$fn__5859@2b30645]
Evaluation count : 420 in 60 samples of 7 calls.
             Execution time mean : 147.795788 ms
    Execution time std-deviation : 1.630555 ms
   Execution time lower quantile : 144.623342 ms ( 2.5%)
   Execution time upper quantile : 150.915761 ms (97.5%)
                   Overhead used : 16.005152 ns
Are the same foodspots found? false
"Elapsed time: 730277.548378 msecs"
#'user/wwfs


OK, this looks bad for the -plus function that uses the non-exact
search in Continuous2D, i.e. the third run::

	user=> (map count (map first wwfs))
	(246 246 152)

i.e. the third run, the non-exact search, found a foodspot too early.

Indeed, it found a different foodspot:

user=> (map last (map first wwfs))
([-330.5812090678446 71.65127433975125]
 [-330.5812090678446 71.65127433975125]
 [-96.37622753319967 -0.9751720952533436])


IN fact what happened is that the first two searches found no
foodspots, but the non-exact one did:

user=> (map count (map first wwfs))
(246 246 152)
user=> (map last (map first wwfs))
([-330.5812090678446 71.65127433975125]
 [-330.5812090678446 71.65127433975125]
 [-96.37622753319967 -0.9751720952533436])
user=> (map second wwfs)
(nil nil (#object[forage.mason.food.Foodspot 0x3b30421e "forage.mason.food.Foodspot@3b30421e"]))
user=> (count stop-walk)
246

i.e. the nils mean no foodspot was found, and the last line
shows that the full walk is exactly as long as the ones for the
first two searches.

=========================================



